<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="14" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <EduCourse>
          <option name="authors">
            <list>
              <StepikUserInfo>
                <option name="firstName" value="JetBrains" />
                <option name="id" value="17813950" />
                <option name="lastName" value="" />
              </StepikUserInfo>
            </list>
          </option>
          <option name="compatible" value="true" />
          <option name="courseMode" value="Study" />
          <option name="createDate" value="1509021377000" />
          <option name="customPresentableName" />
          <option name="description" value="Kotlin Koans are a series of exercises to get you familiar with the Kotlin syntax" />
          <option name="environment" value="" />
          <option name="fromZip" value="false" />
          <option name="id" value="4222" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="17813950" />
            </list>
          </option>
          <option name="language" value="kotlin" />
          <option name="languageCode" value="en" />
          <option name="name" value="Kotlin Koans" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list>
              <option value="8927" />
            </list>
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="type" value="pycharm11 kotlin" />
          <option name="updateDate" value="1601303848000" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59492" />
                <option name="index" value="1" />
                <option name="name" value="Introduction" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1574957115000" />
                <option name="unitId" value="36977" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Simple Functions&#10;&#10;Check out the [function syntax](http://kotlinlang.org/docs/reference/basic-syntax.html#defining-functions)&#10;and change the code to make the function `start` return the string `&quot;OK&quot;`.&#10;&#10;In the Kotlin Koans tasks the function `TODO()` will throw an exception.&#10;To complete Kotlin Koans you need to replace this function invocation with meaningful code according to the problem.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234720" />
                      <option name="index" value="1" />
                      <option name="name" value="Hello, world!" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="22" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="14" />
                                      <option name="offset" value="12" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="&quot;OK&quot;" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun start(): String = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestStart {&#10;    @Test(timeout = 1000)&#10;    fun testOk() {&#10;        Assert.assertEquals(&quot;OK&quot;, start())&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957083000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Named arguments&#10;&#10;Make the function `joinOptions()` return the list in a JSON format (e.g., &quot;[a, b, c]&quot;)&#10;by specifying only two arguments. &#10;&#10;[Default and named](http://kotlinlang.org/docs/reference/functions.html#default-arguments)&#10;arguments help to minimize the number of overloads and improve the readability of the function invocation.&#10;The library function [`joinToString`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/join-to-string.html)&#10;is declared with default values for parameters:&#10;&#10;```&#10;fun joinToString(&#10;    separator: String = &quot;, &quot;,&#10;    prefix: String = &quot;&quot;,&#10;    postfix: String = &quot;&quot;,&#10;    /* ... */&#10;): String&#10;```&#10;&#10;It can be called on a collection of Strings." />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234722" />
                      <option name="index" value="2" />
                      <option name="name" value="Named arguments" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="76" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="33" />
                                      <option name="offset" value="76" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="prefix = &quot;[&quot;, postfix = &quot;]&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun joinOptions(options: Collection&lt;String&gt;) =&#10;        options.joinToString(TODO())&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import koans.util.errorMessage&#10;import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestNamedArguments {&#10;&#10;    @Test(timeout = 1000)&#10;    fun testJoinToString() {&#10;        Assert.assertEquals(errorMessage(&quot;joinOptions&quot;), &quot;[yes, no, may be]&quot;, joinOptions(listOf(&quot;yes&quot;, &quot;no&quot;, &quot;may be&quot;)))&#10;    }&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957090000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Default arguments&#10;&#10;Imagine, you have several overloads of 'foo()' in Java:&#10;&#10;```java&#10;public String foo(String name, int number, boolean toUpperCase) {&#10;    return (toUpperCase ? name.toUpperCase() : name) + number;&#10;}&#10;public String foo(String name, int number) {&#10;    return foo(name, number, false);&#10;}&#10;public String foo(String name, boolean toUpperCase) {&#10;    return foo(name, 42, toUpperCase);&#10;}&#10;public String foo(String name) {&#10;    return foo(name, 42);&#10;}&#10;```&#10;&#10;You can replace all these Java overloads with one function in Kotlin.&#10;Change the declaration of the `foo` function in a way that makes the code using `foo` compile.&#10;Use [default and named](http://kotlinlang.org/docs/reference/functions.html#default-arguments) arguments.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234723" />
                      <option name="index" value="3" />
                      <option name="name" value="Default arguments" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="56" />
                                          <option name="offset" value="0" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="70" />
                                      <option name="offset" value="0" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="fun foo(name: String, number: Int, toUpperCase: Boolean)" />
                                      <option name="possibleAnswer" value="fun foo(name: String, number: Int = 42, toUpperCase: Boolean = false)" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun foo(name: String, number: Int, toUpperCase: Boolean) =&#10;        (if (toUpperCase) name.toUpperCase() else name) + number&#10;&#10;fun useFoo() = listOf(&#10;        foo(&quot;a&quot;),&#10;        foo(&quot;b&quot;, number = 1),&#10;        foo(&quot;c&quot;, toUpperCase = true),&#10;        foo(name = &quot;d&quot;, number = 2, toUpperCase = true)&#10;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestDefaultAndNamedParams() {&#10;&#10;    @Test(timeout = 1000)&#10;    fun testDefaultAndNamedParams() {&#10;        Assert.assertEquals(&quot;'useFoo()' returns wrong result\n&quot;,&#10;                listOf(&quot;a42&quot;, &quot;b1&quot;, &quot;C42&quot;, &quot;D2&quot;), useFoo())&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957096000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Triple-quoted strings&#10;&#10;Learn about the [different string literals and string templates](http://kotlinlang.org/docs/reference/basic-types.html#string-literals)&#10;in Kotlin.&#10;&#10;You can use the handy library functions &#10;[`trimIndent`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-indent.html)&#10;and [`trimMargin`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html)&#10;to format multiline triple-quoted strings&#10;in accordance with the surrounding code.&#10;&#10;Replace the `trimIndent` call with the `trimMargin` call&#10;taking `#` as the prefix value, so that the resulting string doesn't contain&#10;the prefix character.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="963311" />
                      <option name="index" value="4" />
                      <option name="name" value="Triple-quoted strings" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="13" />
                                          <option name="offset" value="162" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="16" />
                                      <option name="offset" value="162" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value=".trimIndent()" />
                                      <option name="possibleAnswer" value=".trimMargin(&quot;#&quot;)" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="const val question = &quot;life, the universe, and everything&quot;&#10;const val answer = 42&#10;&#10;val tripleQuotedString = &quot;&quot;&quot;&#10;    #question = &quot;$question&quot;&#10;    #answer = $answer&quot;&quot;&quot;.trimIndent()&#10;&#10;fun main() {&#10;    println(tripleQuotedString)&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/Tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/Tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test(timeout = 1000)&#10;    fun testSolution() {&#10;        Assert.assertEquals(&#10;                &quot;The margin prefix shouldn't be present &quot; +&#10;                        &quot;in the resulting string&quot;,&#10;                tripleQuotedString,&#10;                &quot;&quot;&quot;question = &quot;life, the universe, and everything&quot;&#10;answer = 42&quot;&quot;&quot;)&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957065000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## String templates&#10;&#10;Triple-quoted strings are not only useful for multiline strings, but also&#10;for creating regex patterns as you don't need to escape a backslash with a backslash.&#10;&#10;The following pattern matches a date in the format `13.06.1992`&#10;(two digits, a dot, two digits, a dot, four digits):&#10;&#10;```kotlin&#10;fun getPattern() = &quot;&quot;&quot;\d{2}\.\d{2}\.\d{4}&quot;&quot;&quot;&#10;```&#10;&#10;Using the `month` variable rewrite this pattern in such a way that it matches the date in the format `13 JUN 1992`&#10;(two digits, a whitespace, a month abbreviation, a whitespace, four digits).&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234725" />
                      <option name="index" value="5" />
                      <option name="name" value="String templates" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="92" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="24" />
                                      <option name="offset" value="92" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="&quot;&quot;&quot;\d{2} $month \d{4}&quot;&quot;&quot;" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="val month = &quot;(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)&quot;&#10;&#10;fun getPattern(): String = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestStringTemplates() {&#10;    private fun testMatch(date: String) = Assert.assertTrue(&quot;The pattern should match $date&quot;, date.matches(getPattern().toRegex()))&#10;    private fun testMismatch(date: String) = Assert.assertFalse(&quot;The pattern shouldn't match $date&quot;, date.matches(getPattern().toRegex()))&#10;&#10;    @Test(timeout = 1000)&#10;    fun match() {&#10;        testMatch(&quot;11 MAR 1952&quot;)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun match1() {&#10;        testMatch(&quot;24 AUG 1957&quot;)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun doNotMatch() {&#10;        testMismatch(&quot;24 RRR 1957&quot;)&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957102000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Nullable types&#10;&#10;Learn about&#10;[null safety and safe calls](http://kotlinlang.org/docs/reference/null-safety.html)&#10;in Kotlin and rewrite the following Java code so that it only has one `if` expression:&#10;&#10;```java&#10;public void sendMessageToClient(&#10;    @Nullable Client client,&#10;    @Nullable String message,&#10;    @NotNull Mailer mailer&#10;) {&#10;    if (client == null || message == null) return;&#10;&#10;    PersonalInfo personalInfo = client.getPersonalInfo();&#10;    if (personalInfo == null) return;&#10;&#10;    String email = personalInfo.getEmail();&#10;    if (email == null) return;&#10;&#10;    mailer.sendMessage(email, message);&#10;}&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234727" />
                      <option name="index" value="6" />
                      <option name="name" value="Nullable types" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="91" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="139" />
                                      <option name="offset" value="87" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="val email = client?.personalInfo?.email&#10;    if (email != null &amp;&amp; message != null) {&#10;        mailer.sendMessage(email, message)&#10;    }" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun sendMessageToClient(&#10;        client: Client?, message: String?, mailer: Mailer&#10;) {&#10;    TODO()&#10;}&#10;&#10;class Client(val personalInfo: PersonalInfo?)&#10;class PersonalInfo(val email: String?)&#10;interface Mailer {&#10;    fun sendMessage(email: String, message: String)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestNullableTypes {&#10;    fun testSendMessageToClient(&#10;            client: Client?,&#10;            message: String?,&#10;            expectedEmail: String? = null,&#10;            shouldBeInvoked: Boolean = false&#10;    ) {&#10;        var invoked = false&#10;        val expectedMessage = message&#10;        sendMessageToClient(client, message, object : Mailer {&#10;            override fun sendMessage(email: String, message: String) {&#10;                invoked = true&#10;                Assert.assertEquals(&quot;The message is not as expected:&quot;,&#10;                        expectedMessage, message)&#10;                Assert.assertEquals(&quot;The email is not as expected:&quot;,&#10;                        expectedEmail, email)&#10;            }&#10;        })&#10;        Assert.assertEquals(&quot;The function 'sendMessage' should${if (shouldBeInvoked) &quot;&quot; else &quot;n't&quot;} be invoked&quot;,&#10;                shouldBeInvoked, invoked)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun everythingIsOk() {&#10;        testSendMessageToClient(Client(PersonalInfo(&quot;bob@gmail.com&quot;)),&#10;                &quot;Hi Bob! We have an awesome proposition for you...&quot;,&#10;                &quot;bob@gmail.com&quot;,&#10;                true)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun noMessage() {&#10;        testSendMessageToClient(Client(PersonalInfo(&quot;bob@gmail.com&quot;)), null)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun noEmail() {&#10;        testSendMessageToClient(Client(PersonalInfo(null)), &quot;Hi Bob! We have an awesome proposition for you...&quot;)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun noPersonalInfo() {&#10;        testSendMessageToClient(Client(null), &quot;Hi Bob! We have an awesome proposition for you...&quot;)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun noClient() {&#10;        testSendMessageToClient(null, &quot;Hi Bob! We have an awesome proposition for you...&quot;)&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957108000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Nothing type&#10;&#10;[Nothing type](https://kotlinlang.org/docs/reference/exceptions.html#the-nothing-type)&#10;can be used as a return type for a function that always throws an exception.&#10;When you call such a function, the compiler uses the information that it throws an exception.&#10;&#10;Specify `Nothing` return type for the `failWithWrongAge` function.&#10;Note that without the `Nothing` type the `checkAge` function doesn't compile&#10;because the compiler assumes the `age` can be `null`.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="963312" />
                      <option name="index" value="7" />
                      <option name="name" value="Nothing type" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="3" />
                                          <option name="offset" value="74" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="12" />
                                      <option name="offset" value="74" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="   " />
                                      <option name="possibleAnswer" value=": Nothing" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import java.lang.IllegalArgumentException&#10;&#10;fun failWithWrongAge(age: Int?)    {&#10;    throw IllegalArgumentException(&quot;Wrong age: $age&quot;)&#10;}&#10;&#10;fun checkAge(age: Int?) {&#10;    if (age == null || age !in 0..150) failWithWrongAge(age)&#10;    println(&quot;Congrats! Next year you'll be ${age + 1}.&quot;)&#10;}&#10;&#10;fun main() {&#10;    checkAge(10)&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/Tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/Tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    fun testAge(age: Int) {&#10;        val e: IllegalArgumentException? = try {&#10;            checkAge(age)&#10;            null&#10;        } catch (e: IllegalArgumentException) {&#10;            e&#10;        }&#10;        Assert.assertNotNull(&#10;                &quot;Expected IllegalArgumentException for 'checkAge($age)'&quot;, e)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testNegative() = testAge(-10)&#10;&#10;    @Test(timeout = 1000)&#10;    fun testLargeNumber() = testAge(200)&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957069000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Lambdas&#10;&#10;Kotlin supports functional programming.&#10;Learn about [lambdas](https://kotlinlang.org/docs/reference/lambdas.html#lambda-expressions-and-anonymous-functions) in Kotlin.&#10;&#10;Pass a lambda to the [`any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/any.html)&#10;function to check if the collection contains an even number.&#10;The `any` function gets a predicate as an argument and returns true if there is at least one element satisfying the predicate.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234724" />
                      <option name="index" value="8" />
                      <option name="name" value="Lambdas" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="82" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="11" />
                                      <option name="offset" value="82" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="it % 2 == 0" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun containsEven(collection: Collection&lt;Int&gt;): Boolean =&#10;        collection.any { TODO() }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestLambdas() {&#10;    @Test(timeout = 1000)&#10;    fun contains() {&#10;        Assert.assertTrue(&quot;The result should be true if the collection contains an even number&quot;, containsEven(listOf(1, 2, 3, 126, 555)))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun notContains() {&#10;        Assert.assertFalse(&quot;The result should be false if the collection doesn't contain an even number&quot;, containsEven(listOf(43, 33)))&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957115000" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="283540" />
                <option name="index" value="2" />
                <option name="name" value="Classes" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1574957322000" />
                <option name="unitId" value="264854" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Data classes&#10;&#10;Learn about [classes](http://kotlinlang.org/docs/reference/classes.html),&#10;[properties](http://kotlinlang.org/docs/reference/properties.html)&#10;and [data classes](https://kotlinlang.org/docs/reference/data-classes.html)&#10;and then rewrite the following Java code to Kotlin:&#10;&#10;```java&#10;public class Person {&#10;    private final String name;&#10;    private final int age;&#10;&#10;    public Person(String name, int age) {&#10;        this.name = name;&#10;        this.age = age;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public int getAge() {&#10;        return age;&#10;    }&#10;}&#10;```&#10;&#10;Afterwards add the `data` modifier to the resulting class.&#10;This will make the compiler generate a few useful methods for this class: `equals`/`hashCode`, `toString` and some others.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="963306" />
                      <option name="index" value="1" />
                      <option name="name" value="Data classes" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="12" />
                                          <option name="offset" value="0" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="51" />
                                      <option name="offset" value="0" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="class Person" />
                                      <option name="possibleAnswer" value="data class Person(val name: String, val age: Int)" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class Person&#10;&#10;fun getPeople(): List&lt;Person&gt; {&#10;    return listOf(Person(&quot;Alice&quot;, 29), Person(&quot;Bob&quot;, 31))&#10;}&#10;&#10;fun comparePeople(): Boolean {&#10;    val p1 = Person(&quot;Alice&quot;, 29)&#10;    val p2 = Person(&quot;Alice&quot;, 29)&#10;    return p1 == p2  // should be true&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestDataClasses {&#10;    @Test(timeout = 1000)&#10;    fun testListOfPeople() {&#10;        Assert.assertEquals(&quot;The class Person is implemented incorrectly\n&quot;,&#10;                &quot;[Person(name=Alice, age=29), Person(name=Bob, age=31)]&quot;,&#10;                getPeople().toString())&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testComparePeople() {&#10;        Assert.assertTrue(&quot;'comparePeople' function should return true&quot;,&#10;                comparePeople())&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574956981000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Smart casts&#10;&#10;Rewrite the following Java code using [smart casts](http://kotlinlang.org/docs/reference/typecasts.html#smart-casts)&#10;and the [when](http://kotlinlang.org/docs/reference/control-flow.html#when-expression) expression:&#10;&#10;```java&#10;public int eval(Expr expr) {&#10;    if (expr instanceof Num) {&#10;        return ((Num) expr).getValue();&#10;    }&#10;    if (expr instanceof Sum) {&#10;        Sum sum = (Sum) expr;&#10;        return eval(sum.getLeft()) + eval(sum.getRight());&#10;    }&#10;    throw new IllegalArgumentException(&quot;Unknown expression&quot;);&#10;}&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="963307" />
                      <option name="index" value="2" />
                      <option name="name" value="Smart casts" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="72" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="72" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="expr.value" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="101" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="34" />
                                      <option name="offset" value="105" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="eval(expr.left) + eval(expr.right)" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun eval(expr: Expr): Int =&#10;        when (expr) {&#10;            is Num -&gt; TODO()&#10;            is Sum -&gt; TODO()&#10;            else -&gt; throw IllegalArgumentException(&quot;Unknown expression&quot;)&#10;        }&#10;&#10;interface Expr&#10;class Num(val value: Int) : Expr&#10;class Sum(val left: Expr, val right: Expr) : Expr&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestSmartCasts {&#10;    @Test(timeout = 1000)&#10;    fun testNum() {&#10;        Assert.assertEquals(&quot;'eval' on Num(2) works incorrectly\n&quot;, 2, eval(Num(2)))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testSum() {&#10;        Assert.assertEquals(&quot;'eval' on Sum(Num(2), Num(1)) works incorrectly\n&quot;, 3, eval(Sum(Num(2), Num(1))))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testRecursion() {&#10;        Assert.assertEquals(&quot;'eval' on Sum(Sum(Num(1), Num(2)), Num(3)) works incorrectly\n&quot;, 6, eval(Sum(Sum(Num(1), Num(2)), Num(3))))&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574956985000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Sealed classes&#10;&#10;Reuse your solution from the previous task, but replace the interface&#10;with the [`sealed` class](https://kotlinlang.org/docs/reference/sealed-classes.html).&#10;Then you no longer need the `else` branch in `when`. &#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="963308" />
                      <option name="index" value="3" />
                      <option name="name" value="Sealed classes" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="72" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="72" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="expr.value" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="101" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="34" />
                                      <option name="offset" value="105" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="eval(expr.left) + eval(expr.right)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="14" />
                                          <option name="offset" value="119" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="17" />
                                      <option name="offset" value="151" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="interface Expr" />
                                      <option name="possibleAnswer" value="sealed class Expr" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="4" />
                                          <option name="offset" value="162" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="197" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="Expr" />
                                      <option name="possibleAnswer" value="Expr()" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="4" />
                                          <option name="offset" value="212" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="249" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="Expr" />
                                      <option name="possibleAnswer" value="Expr()" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun eval(expr: Expr): Int =&#10;        when (expr) {&#10;            is Num -&gt; TODO()&#10;            is Sum -&gt; TODO()&#10;        }&#10;&#10;interface Expr&#10;class Num(val value: Int) : Expr&#10;class Sum(val left: Expr, val right: Expr) : Expr" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/Tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/Tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestSealedClasses {&#10;    @Test(timeout = 1000)&#10;    fun testNum() {&#10;        Assert.assertEquals(&quot;'eval' on Num(2) works incorrectly\n&quot;, 2, eval(Num(2)))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testSum() {&#10;        Assert.assertEquals(&quot;'eval' on Sum(Num(2), Num(1)) works incorrectly\n&quot;, 3, eval(Sum(Num(2), Num(1))))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testRecursion() {&#10;        Assert.assertEquals(&quot;'eval' on Sum(Sum(Num(1), Num(2)), Num(3)) works incorrectly\n&quot;, 6, eval(Sum(Sum(Num(1), Num(2)), Num(3))))&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574956988000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Rename on import&#10;&#10;When you [import](https://kotlinlang.org/docs/reference/packages.html#imports)&#10;a class or a function, you can specify a different name to use for it&#10;by adding `as NewName` after the import directive.&#10;This can be useful if you want to use two classes or functions with similar names&#10;from different libraries.&#10;&#10;Uncomment the code and make it compile.&#10;Rename `Random` from the kotlin package to `KRandom`,&#10;and `Random` from the java package to JRandom.  &#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="963309" />
                      <option name="index" value="4" />
                      <option name="name" value="Rename on import" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="57" />
                                          <option name="offset" value="0" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="73" />
                                      <option name="offset" value="0" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="// import kotlin.random.Random&#10;// import java.util.Random" />
                                      <option name="possibleAnswer" value="import kotlin.random.Random as KRandom&#10;import java.util.Random as JRandom" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="23" />
                                          <option name="offset" value="144" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="20" />
                                      <option name="offset" value="160" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="// KRandom.nextInt(2) +" />
                                      <option name="possibleAnswer" value="KRandom.nextInt(2) +" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="25" />
                                          <option name="offset" value="210" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="23" />
                                      <option name="offset" value="223" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="// JRandom().nextInt(2) +" />
                                      <option name="possibleAnswer" value="JRandom().nextInt(2) +" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// import kotlin.random.Random&#10;// import java.util.Random&#10;&#10;fun useDifferentRandomClasses(): String {&#10;    return &quot;Kotlin random: &quot; +&#10;            // KRandom.nextInt(2) +&#10;            &quot; Java random:&quot; +&#10;            // JRandom().nextInt(2) +&#10;            &quot;.&quot;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/Tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/Tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test(timeout = 1000)&#10;    fun testRandom() {&#10;        val string = useDifferentRandomClasses()&#10;        Assert.assertTrue(&#10;                &quot;The string should contain random numbers 0 or 1\n$string&quot;,&#10;                setOf('0', '1').any { it in string })&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574956993000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Extension functions&#10;&#10;Learn about [extension functions](http://kotlinlang.org/docs/reference/extensions.html).&#10;Then implement the extension functions `Int.r()` and `Pair.r()` and make them convert Int and Pair to a `RationalNumber`.&#10;&#10;`Pair` is a class defined in the standard library:&#10;&#10;```&#10;data class Pair(&#10;    val first: A,&#10;    val second: B&#10;)&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="963310" />
                      <option name="index" value="5" />
                      <option name="name" value="Extension functions" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="30" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="23" />
                                      <option name="offset" value="14" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="RationalNumber(this, 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="79" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="0" />
                                      <option name="offset" value="103" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="RationalNumber(first, second)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun Int.r(): RationalNumber = TODO()&#10;&#10;fun Pair&lt;Int, Int&gt;.r(): RationalNumber = TODO()&#10;&#10;data class RationalNumber(val numerator: Int, val denominator: Int)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestExtensionFunctions() {&#10;    @Test(timeout = 1000)&#10;    fun testIntExtension() {&#10;        Assert.assertEquals(&quot;Rational number creation error: &quot;, RationalNumber(4, 1), 4.r())&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testPairExtension() {&#10;        Assert.assertEquals(&quot;Rational number creation error: &quot;, RationalNumber(2, 3), Pair(2, 3).r())&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574956996000" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59493" />
                <option name="index" value="3" />
                <option name="name" value="Conventions" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1594801829000" />
                <option name="unitId" value="36978" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Comparison&#10;&#10;Learn about [operator overloading](http://kotlinlang.org/docs/reference/operator-overloading.html)&#10;and how the different conventions for operations like `==`, `&lt;`, `+` work in Kotlin.&#10;Add the function `compareTo` to the class MyDate to make it comparable.&#10;After this the code below `date1 &lt; date2` should start to compile.&#10;&#10;Note that when you override a member in Kotlin, the&#10;[`override`](http://kotlinlang.org/docs/reference/classes.html#overriding-members)&#10;modifier is mandatory.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234733" />
                      <option name="index" value="1" />
                      <option name="name" value="Comparison" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="97" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="202" />
                                      <option name="offset" value="93" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="override fun compareTo(other: MyDate) = when {&#10;        year != other.year -&gt; year - other.year&#10;        month != other.month -&gt; month - other.month&#10;        else -&gt; dayOfMonth - other.dayOfMonth&#10;    }" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int) : Comparable&lt;MyDate&gt; {&#10;    /* TODO */&#10;}&#10;&#10;fun test(date1: MyDate, date2: MyDate) {&#10;    // this code should compile:&#10;    println(date1 &lt; date2)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class TestComparison {&#10;&#10;    @Test(timeout = 1000)&#10;    fun testBefore() {&#10;        val first = MyDate(2014, 5, 10)&#10;        val second = MyDate(2014, 7, 11)&#10;        Assert.assertTrue(errorMessage(&quot;compareTo&quot;) + &quot;$first should go before $second&quot;, first &lt; second)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testAfter() {&#10;        val first = MyDate(2014, 10, 20)&#10;        val second = MyDate(2014, 7, 11)&#10;        Assert.assertTrue(errorMessage(&quot;compareTo&quot;) + &quot;$first should go after $second&quot;, first &gt; second)&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1594801829000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Ranges&#10;&#10;Using [ranges](http://kotlinlang.org/docs/reference/ranges.html)&#10;implement a function that checks whether the date is in the range&#10;between the first date and the last date (inclusive).&#10;&#10;You can build a range of any comparable elements.&#10;In Kotlin [`in` checks](https://kotlinlang.org/docs/reference/operator-overloading.html#in)&#10;are translated to the corresponding `contains` calls&#10;and [`..`](https://kotlinlang.org/docs/reference/operator-overloading.html#arithmetic)&#10;to `rangeTo` calls:&#10;&#10;```kotlin&#10;val list = listOf(&quot;a&quot;, &quot;b&quot;)&#10;&quot;a&quot; in list  // list.contains(&quot;a&quot;)&#10;&quot;a&quot; !in list // !list.contains(&quot;a&quot;)&#10;&#10;date1..date2 // date1.rangeTo(date2)&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234735" />
                      <option name="index" value="2" />
                      <option name="name" value="Ranges" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="82" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="22" />
                                      <option name="offset" value="67" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="date in first..last" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun checkInRange(date: MyDate, first: MyDate, last: MyDate): Boolean {&#10;    return TODO()&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/MyDate.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/MyDate.kt" />
                                <option name="text" value="data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int) : Comparable&lt;MyDate&gt; {&#10;    override fun compareTo(other: MyDate): Int {&#10;        if (year != other.year) return year - other.year&#10;        if (month != other.month) return month - other.month&#10;        return dayOfMonth - other.dayOfMonth&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestRangeTo {&#10;    fun doTest(date: MyDate, first: MyDate, last: MyDate, shouldBeInRange: Boolean) {&#10;        val message = &quot;$date should${if (shouldBeInRange) &quot;&quot; else &quot;n't&quot;} be in range: $first..$last:\n&quot;&#10;        Assert.assertEquals(message, shouldBeInRange, checkInRange(date, first, last))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testInRange() {&#10;        doTest(MyDate(2014, 3, 22), MyDate(2014, 1, 1), MyDate(2015, 1, 1), shouldBeInRange = true)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testBefore() {&#10;        doTest(MyDate(2013, 3, 22), MyDate(2014, 1, 1), MyDate(2015, 1, 1), shouldBeInRange = false)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testAfter() {&#10;        doTest(MyDate(2015, 3, 22), MyDate(2014, 1, 1), MyDate(2015, 1, 1), shouldBeInRange = false)&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957130000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## For loop&#10;&#10;A Kotlin [for loop](http://kotlinlang.org/docs/reference/control-flow.html#for-loops)&#10;can iterate through any object if the corresponding `iterator` member or extension function is available.&#10;&#10;Make the class `DateRange` implement [`Iterable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/),&#10;so that it can be iterated over.&#10;Use the function `MyDate.followingDate()` defined in `DateUtil.kt`;&#10;you don't have to implement the logic for finding the following date on your own.&#10;&#10;Use an [object expression](http://kotlinlang.org/docs/reference/object-declarations.html)&#10;which plays the same role in Kotlin as an anonymous class in Java. &#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234736" />
                      <option name="index" value="3" />
                      <option name="name" value="For loop" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="51" />
                                          <option name="offset" value="0" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="777" />
                                      <option name="offset" value="0" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="class DateRange(val start: MyDate, val end: MyDate)" />
                                      <option name="possibleAnswer" value="class DateRange(val start: MyDate, val end: MyDate) : Iterable&lt;MyDate&gt; {&#10;    override fun iterator(): Iterator&lt;MyDate&gt; {&#10;        return object : Iterator&lt;MyDate&gt; {&#10;            var current: MyDate = start&#10;&#10;            override fun next(): MyDate {&#10;                if (!hasNext()) throw NoSuchElementException()&#10;                val result = current&#10;                current = current.followingDate()&#10;                return result&#10;            }&#10;&#10;            override fun hasNext(): Boolean = current &lt;= end&#10;        }&#10;    }&#10;}" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class DateRange(val start: MyDate, val end: MyDate)&#10;&#10;fun iterateOverDateRange(firstDate: MyDate, secondDate: MyDate, handler: (MyDate) -&gt; Unit) {&#10;    for (date in firstDate..secondDate) {&#10;        handler(date)&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/DateUtil.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/DateUtil.kt" />
                                <option name="text" value="import java.util.Calendar&#10;&#10;/*&#10; * Returns the following date after the given one.&#10; * For example, for Dec 31, 2019 the date Jan 1, 2020 is returned.&#10; */&#10;fun MyDate.followingDate(): MyDate {&#10;    val c = Calendar.getInstance()&#10;    c.set(year, month, dayOfMonth)&#10;    val millisecondsInADay = 24 * 60 * 60 * 1000L&#10;    val timeInMillis = c.timeInMillis + millisecondsInADay&#10;    val result = Calendar.getInstance()&#10;    result.timeInMillis = timeInMillis&#10;    return MyDate(result.get(Calendar.YEAR), result.get(Calendar.MONTH), result.get(Calendar.DATE))&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/MyDate.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/MyDate.kt" />
                                <option name="text" value="data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int) : Comparable&lt;MyDate&gt; {&#10;    override fun compareTo(other: MyDate): Int {&#10;        if (year != other.year) return year - other.year&#10;        if (month != other.month) return month - other.month&#10;        return dayOfMonth - other.dayOfMonth&#10;    }&#10;}&#10;&#10;operator fun MyDate.rangeTo(other: MyDate) = DateRange(this, other)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestForLoop {&#10;    @Test(timeout = 1000)&#10;    fun testIterateOverDateRange() {&#10;        val actualDateRange = arrayListOf&lt;MyDate&gt;()&#10;        iterateOverDateRange(MyDate(2016, 5, 1), MyDate(2016, 5, 5)) { date -&gt;&#10;            actualDateRange.add(date)&#10;        }&#10;        val expectedDateRange = arrayListOf(&#10;                MyDate(2016, 5, 1), MyDate(2016, 5, 2), MyDate(2016, 5, 3), MyDate(2016, 5, 4), MyDate(2016, 5, 5))&#10;        Assert.assertEquals(&quot;Incorrect iteration over the following dates:\n&quot;,&#10;                expectedDateRange, actualDateRange)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testIterateOverEmptyRange() {&#10;        var invoked = false&#10;        iterateOverDateRange(MyDate(2016, 1, 1), MyDate(2015, 1, 1), { invoked = true })&#10;        Assert.assertFalse(&quot;Handler was invoked on an empty range:\n&quot;, invoked)&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957138000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Operators overloading&#10;&#10;Implement date arithmetic. Support adding years, weeks, and days to a date.&#10;You could write the code like this: `date + YEAR * 2 + WEEK * 3 + DAY * 15`.&#10;&#10;First, add the extension function `plus()` to `MyDate`, taking the `TimeInterval` as an argument.&#10;Use the utility function `MyDate.addTimeIntervals()` declared in&#10;`DateUtil.kt`&#10;&#10;Then, try to support adding several time intervals to a date.&#10;You may need an extra class.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234737" />
                      <option name="index" value="4" />
                      <option name="name" value="Operators overloading" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="69" />
                                          <option name="offset" value="192" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="69" />
                                      <option name="offset" value="192" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="operator fun MyDate.plus(timeInterval: TimeInterval): MyDate = TODO()" />
                                      <option name="possibleAnswer" value="operator fun MyDate.plus(timeInterval: TimeInterval) =&#10;        addTimeIntervals(timeInterval, 1)&#10;&#10;class RepeatedTimeInterval(val timeInterval: TimeInterval, val number: Int)&#10;&#10;operator fun TimeInterval.times(number: Int) =&#10;        RepeatedTimeInterval(this, number)&#10;&#10;operator fun MyDate.plus(timeIntervals: RepeatedTimeInterval) =&#10;        addTimeIntervals(timeIntervals.timeInterval, timeIntervals.number)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="64" />
                                          <option name="offset" value="371" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="64" />
                                      <option name="offset" value="371" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO(&quot;Uncomment&quot;) //return today + YEAR * 2 + WEEK * 3 + DAY * 5" />
                                      <option name="possibleAnswer" value="return today + YEAR * 2 + WEEK * 3 + DAY * 5" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import TimeInterval.*&#10;&#10;data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int)&#10;&#10;// Supported intervals that might be added to dates:&#10;enum class TimeInterval { DAY, WEEK, YEAR }&#10;&#10;operator fun MyDate.plus(timeInterval: TimeInterval): MyDate = TODO()&#10;&#10;fun task1(today: MyDate): MyDate {&#10;    return today + YEAR + WEEK&#10;}&#10;&#10;fun task2(today: MyDate): MyDate {&#10;    TODO(&quot;Uncomment&quot;) //return today + YEAR * 2 + WEEK * 3 + DAY * 5&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/DateUtil.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/DateUtil.kt" />
                                <option name="text" value="import java.util.Calendar&#10;&#10;/*&#10; * Returns the date after the given time interval.&#10; * The interval is specified as the given amount of days, weeks of years.&#10; * Usages:&#10; * 'date.addTimeIntervals(TimeInterval.DAY, 4)'&#10; * 'date.addTimeIntervals(TimeInterval.WEEK, 3)'&#10; */&#10;fun MyDate.addTimeIntervals(timeInterval: TimeInterval, amount: Int): MyDate {&#10;    val c = Calendar.getInstance()&#10;    c.set(year + if (timeInterval == TimeInterval.YEAR) amount else 0, month, dayOfMonth)&#10;    var timeInMillis = c.timeInMillis&#10;    val millisecondsInADay = 24 * 60 * 60 * 1000L&#10;    timeInMillis += amount * when (timeInterval) {&#10;        TimeInterval.DAY -&gt; millisecondsInADay&#10;        TimeInterval.WEEK -&gt; 7 * millisecondsInADay&#10;        TimeInterval.YEAR -&gt; 0L&#10;    }&#10;    val result = Calendar.getInstance()&#10;    result.timeInMillis = timeInMillis&#10;    return MyDate(result.get(Calendar.YEAR), result.get(Calendar.MONTH), result.get(Calendar.DATE))&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import koans.util.errorMessage&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestOperatorsOverloading {&#10;    @Test(timeout = 1000)&#10;    fun testAddOneTimeInterval() {&#10;        Assert.assertEquals(errorMessage(&quot;task1&quot;), MyDate(2015, 5, 8), task1(MyDate(2014, 5, 1)))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testOneMonth() {&#10;        Assert.assertEquals(errorMessage(&quot;task2&quot;), MyDate(2016, 0, 27), task2(MyDate(2014, 0, 1)))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testMonthChange() {&#10;        Assert.assertEquals(errorMessage(&quot;task2&quot;), MyDate(2016, 1, 20), task2(MyDate(2014, 0, 25)))&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957146000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Invoke&#10;&#10;Objects with an [`invoke()`](https://kotlinlang.org/docs/reference/operator-overloading.html#invoke)&#10;method can be invoked as a function.&#10;&#10;You can add an `invoke` extension for any class, but it's better not to overuse it:&#10;&#10;```kotlin&#10;fun Int.invoke() { println(this) }&#10;&#10;1() //huh?..&#10;```&#10;&#10;Implement the function `Invokable.invoke()` so it can count the number of times it is invoked.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234739" />
                      <option name="index" value="5" />
                      <option name="name" value="Invoke" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="123" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="123" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="numberOfInvocations++&#10;        return this" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Solved" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class Invokable {&#10;    var numberOfInvocations: Int = 0&#10;        private set&#10;&#10;    operator fun invoke(): Invokable {&#10;        TODO()&#10;    }&#10;}&#10;&#10;fun invokeTwice(invokable: Invokable) = invokable()()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestInvoke {&#10;    @Test(timeout = 1000)&#10;    fun testInvokeTwice() = testInvokable(2, ::invokeTwice)&#10;&#10;    private fun testInvokable(numberOfInvocations: Int, invokeSeveralTimes: (Invokable) -&gt; Invokable) {&#10;        val invokable = Invokable()&#10;        val message = &quot;The number of invocations is incorrect:\n&quot;&#10;        Assert.assertEquals(message, numberOfInvocations, invokeSeveralTimes(invokable).numberOfInvocations)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testNumberOfInvocations() {&#10;        testInvokable(1) { it() }&#10;        testInvokable(5) { it()()()()() }&#10;        testInvokable(0) { it }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957154000" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59494" />
                <option name="index" value="4" />
                <option name="name" value="Collections" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1594801829000" />
                <option name="unitId" value="36979" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Introduction&#10;&#10;This section was inspired by [GS Collections Kata](https://github.com/goldmansachs/gs-collections-kata).&#10;&#10;Kotlin can be easily mixed with Java code.&#10;Default collections in Kotlin are all Java collections under the hood.&#10;Learn about [read-only and mutable views on Java collections](https://kotlinlang.org/docs/reference/collections-overview.html#collection-types).&#10;&#10;The [Kotlin standard library](http://kotlinlang.org/api/latest/jvm/stdlib/kotlin/)&#10;contains lots of extension functions that make working with collections more convenient.&#10;For example, operations that transform a collection into another one, starting with 'to':&#10;[`toSet`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/to-set.html) or&#10;[`toList`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/to-list.html).&#10;&#10;Implement the extension function `Shop.getSetOfCustomers()`.&#10;The class `Shop` and all related classes can be found in `Shop.kt`.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234740" />
                      <option name="index" value="1" />
                      <option name="name" value="Introduction" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="54" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="25" />
                                      <option name="offset" value="28" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.toSet()" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun Shop.getSetOfCustomers(): Set&lt;Customer&gt; =&#10;        TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class TestIntroduction {&#10;    @Test(timeout = 1000)&#10;    fun testSetOfCustomers() {&#10;        Assert.assertTrue(errorMessage(&quot;getSetOfCustomers&quot;),&#10;                shop.getSetOfCustomers() == customers.values.toSet())&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957162000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Sort&#10;&#10;Learn about&#10;[collection ordering](https://kotlinlang.org/docs/reference/collection-ordering.html)&#10;and the&#10;[the difference](https://kotlinlang.org/docs/reference/collection-operations.html#write-operations)&#10;between operations in-place on mutable collections and operations returning new collections. &#10;&#10;Implement a function for returning the list of customers,&#10;sorted in descending order by the number of orders they have made. &#10;Use&#10;[`sortedDescending`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sorted-descending.html) or&#10;[`sortedByDescending`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sorted-by-descending.html).&#10;&#10;```kotlin&#10;val strings = listOf(&quot;bbb&quot;, &quot;a&quot;, &quot;cc&quot;)&#10;strings.sorted() ==&#10;        listOf(&quot;a&quot;, &quot;bbb&quot;, &quot;cc&quot;)&#10;&#10;strings.sortedBy { it.length } ==&#10;        listOf(&quot;a&quot;, &quot;cc&quot;, &quot;bbb&quot;)&#10;&#10;strings.sortedDescending() ==&#10;        listOf(&quot;cc&quot;, &quot;bbb&quot;, &quot;a&quot;)&#10;&#10;strings.sortedByDescending { it.length } ==&#10;        listOf(&quot;bbb&quot;, &quot;cc&quot;, &quot;a&quot;)&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234745" />
                      <option name="index" value="2" />
                      <option name="name" value="Sort" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="155" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="155" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.sortedByDescending { it.orders.size }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return a list of customers, sorted in the descending by number of orders they have made&#10;fun Shop.getCustomersSortedByOrders(): List&lt;Customer&gt; =&#10;        TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class TestSort {&#10;    @Test(timeout = 1000)&#10;    fun testGetCustomersSortedByNumberOfOrders() {&#10;        val errorMessage = errorMessage(&quot;getCustomersSortedByOrders&quot;)&#10;        val actual = shop.getCustomersSortedByOrders()&#10;        Assert.assertTrue(errorMessage, 6 == actual.size)&#10;        Assert.assertTrue(errorMessage, customers[reka] == actual[0])&#10;        Assert.assertTrue(errorMessage, customers[lucas] == actual[1])&#10;        Assert.assertTrue(errorMessage, customers[cooper] == actual[5])&#10;        Assert.assertTrue(errorMessage, setOf(customers[nathan], customers[bajram], customers[asuka]) ==&#10;                actual.subList(2, 5).toSet())&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957169000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Filter; map&#10;&#10;Learn about [mapping](https://kotlinlang.org/docs/reference/collection-transformations.html#mapping) and &#10;[filtering](https://kotlinlang.org/docs/reference/collection-filtering.html#filtering-by-predicate) a collection.&#10;&#10;Implement the following extension functions&#10;using the&#10;[`map`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/map.html) and&#10;[`filter`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/filter.html) &#10;functions:&#10;- Find all the different cities the customers are from.&#10;- Find the customers living in a given city.&#10;&#10;```kotlin&#10;val numbers = listOf(1, -1, 2)&#10;numbers.filter { it &gt; 0 } == listOf(1, 2)&#10;numbers.map { it * it } == listOf(1, 1, 4)&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234741" />
                      <option name="index" value="3" />
                      <option name="name" value="Filter map" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="106" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="106" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.map { it.city }.toSet()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="223" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="223" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.filter { it.city == city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Find all the different cities the customers are from&#10;fun Shop.getCustomerCities(): Set&lt;City&gt; =&#10;        TODO()&#10;&#10;// Find the customers living in a given city&#10;fun Shop.getCustomersFrom(city: City): List&lt;Customer&gt; =&#10;        TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class TestFilterMap {&#10;    @Test(timeout = 1000)&#10;    fun testCitiesCustomersAreFrom() {&#10;        Assert.assertTrue(errorMessage(&quot;getCustomerCities&quot;),&#10;                setOf(Canberra, Vancouver, Budapest, Ankara, Tokyo) == shop.getCustomerCities())&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testCustomersFromCity() {&#10;        Assert.assertTrue(errorMessage(&quot;getCustomersFrom&quot;),&#10;                listOf(customers[lucas], customers[cooper]) == shop.getCustomersFrom(Canberra))&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1594801836000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## All, Any, and other predicates&#10;&#10;Learn about [testing predicates](https://kotlinlang.org/docs/reference/collection-filtering.html#testing-predicates)&#10;and [retrieving elements by condition](https://kotlinlang.org/docs/reference/collection-elements.html#retrieving-by-condition).&#10;&#10;Implement the following functions using&#10;[`all`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/all.html),&#10;[`any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/any.html),&#10;[`count`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/count.html),&#10;[`find`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/find.html):&#10;- `checkAllCustomersAreFrom` should return true if all customers are from a given city&#10;- `hasCustomerFrom` should check if there is at least one customer from a given city&#10;- `countCustomersFrom` should return the number of customers from a given city&#10;- `findCustomerFrom` should return a customer who lives in a given city, or `null` if there is none&#10;&#10;```kotlin&#10;val numbers = listOf(-1, 0, 2)&#10;val isZero: (Int) -&gt; Boolean = { it == 0 }&#10;numbers.any(isZero) == true&#10;numbers.all(isZero) == false&#10;numbers.count(isZero) == 1&#10;numbers.find { it &gt; 0 } == 2&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234742" />
                      <option name="index" value="4" />
                      <option name="name" value="All Any and other predicates" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="119" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="119" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.all { it.city == city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="250" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="250" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.any { it.city == city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="365" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="365" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.count { it.city == city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="505" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="505" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.find { it.city == city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return true if all customers are from a given city&#10;fun Shop.checkAllCustomersAreFrom(city: City): Boolean =&#10;        TODO()&#10;&#10;// Return true if there is at least one customer from a given city&#10;fun Shop.hasCustomerFrom(city: City): Boolean =&#10;        TODO()&#10;&#10;// Return the number of customers from a given city&#10;fun Shop.countCustomersFrom(city: City): Int =&#10;        TODO()&#10;&#10;// Return a customer who lives in a given city, or null if there is none&#10;fun Shop.findCustomerFrom(city: City): Customer? =&#10;        TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class TestAllAnyAndOtherPredicates {&#10;&#10;    @Test(timeout = 1000)&#10;    fun testAllCustomersAreFromCity() {&#10;        Assert.assertFalse(errorMessage(&quot;checkAllCustomersAreFrom&quot;), shop.checkAllCustomersAreFrom(Canberra))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testAnyCustomerIsFromCity() {&#10;        Assert.assertTrue(errorMessage(&quot;hasCustomerFrom&quot;), shop.hasCustomerFrom(Canberra))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testCountCustomersFromCity() {&#10;        Assert.assertTrue(errorMessage(&quot;countCustomersFrom&quot;), 2 == shop.countCustomersFrom(Canberra))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testAnyCustomerFromCity() {&#10;        Assert.assertTrue(errorMessage(&quot;findCustomerFrom&quot;), customers[lucas] == shop.findCustomerFrom(Canberra))&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1594801842000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Max min&#10;&#10;Learn about [Collection Aggregate Operations](https://kotlinlang.org/docs/reference/collection-aggregate.html).&#10;&#10;Implement two functions:&#10;- the first should return the customer who has placed the most amount of orders in this shop &#10;- the second should return the most expensive product that has been ordered by the given customer&#10;&#10;The functions&#10;[`max`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/max.html),&#10;[`min`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/min.html),&#10;[`maxBy`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/max-by.html), and&#10;[`minBy`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/min-by.html)&#10;might be helpful.&#10;&#10;```kotlin&#10;listOf(1, 42, 4).max() == 42&#10;listOf(&quot;a&quot;, &quot;ab&quot;).minBy(String::length) == &quot;a&quot;&#10;```&#10;&#10;You can use [callable references](https://kotlinlang.org/docs/reference/lambdas.html#instantiating-a-function-type)&#10;instead of lambdas. This can be especially helpful in call chains, where&#10;`it` occurs in different lambdas and has different types.&#10;Implement the `getMostExpensiveProductBy` function using callable references.  &#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234744" />
                      <option name="index" value="5" />
                      <option name="name" value="Max min" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="122" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="122" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.maxBy { it.orders.size }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="281" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="281" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customer.orders&#10;                .flatMap(Order::products)&#10;                .maxBy(Product::price)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return a customer who has placed the maximum amount of orders&#10;fun Shop.getCustomerWithMaxOrders(): Customer? =&#10;        TODO()&#10;&#10;// Return the most expensive product that has been ordered by the given customer&#10;fun getMostExpensiveProductBy(customer: Customer): Product? =&#10;        TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class TestMaxMin {&#10;    @Test(timeout = 1000)&#10;    fun testCustomerWithMaximumNumberOfOrders() {&#10;        Assert.assertTrue(errorMessage(&quot;getCustomerWithMaxOrders&quot;),&#10;                customers[reka] == shop.getCustomerWithMaxOrders())&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testTheMostExpensiveOrderedProduct() {&#10;        Assert.assertTrue(errorMessage(&quot;getMostExpensiveProductBy&quot;),&#10;                rubyMine == getMostExpensiveProductBy(customers[nathan]!!))&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957192000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Sum&#10;&#10;Implement a function that calculates the total amount of money the customer has spent:&#10;the sum of the prices for all the products ordered by a given customer. &#10;Note that each product should be counted as many times as it was ordered.&#10;&#10;Use&#10;[`sum`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/sum.html) or&#10;[`sumBy`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/sum-by.html).&#10;If you want to sum up double values, use&#10;[`sumByDouble`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/sum-by-double.html).&#10;&#10;```kotlin&#10;listOf(1, 5, 3).sum() == 9&#10;listOf(&quot;a&quot;, &quot;b&quot;, &quot;cc&quot;).sumBy { it.length } == 4&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234746" />
                      <option name="index" value="6" />
                      <option name="name" value="Sum" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="132" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="132" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customer.orders.flatMap { it.products }.sumByDouble { it.price }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return the sum of prices for all the products ordered by a given customer&#10;fun moneySpentBy(customer: Customer): Double =&#10;        TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class TestSum {&#10;    @Test(timeout = 1000)&#10;    fun testGetTotalOrderPrice() {&#10;        Assert.assertTrue(errorMessage(&quot;moneySpentBy&quot;), moneySpentBy(customers[nathan]!!) == 148.0)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testGetTotalOrderPrice1() {&#10;        Assert.assertTrue(errorMessage(&quot;moneySpentBy&quot;) +&#10;                &quot;The product ordered several times should be counted as many times as it was ordered&quot;,&#10;                moneySpentBy(customers[lucas]!!) == 586.0)&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957200000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Group By&#10;&#10;Learn about [grouping](https://kotlinlang.org/docs/reference/collection-grouping.html).&#10;Use&#10;[`groupBy`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/group-by.html)&#10;to implement the function to build a map that stores the customers living in a given city.&#10;&#10;```kotlin&#10;val result = &#10;    listOf(&quot;a&quot;, &quot;b&quot;, &quot;ba&quot;, &quot;ccc&quot;, &quot;ad&quot;)&#10;        .groupBy { it.length }&#10;&#10;result == mapOf(&#10;    1 to listOf(&quot;a&quot;, &quot;b&quot;),&#10;    2 to listOf(&quot;ba&quot;, &quot;ad&quot;),&#10;    3 to listOf(&quot;ccc&quot;))&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234747" />
                      <option name="index" value="7" />
                      <option name="name" value="GroupBy" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="133" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="133" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.groupBy { it.city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Build a map that stores the customers living in a given city&#10;fun Shop.groupCustomersByCity(): Map&lt;City, List&lt;Customer&gt;&gt; =&#10;        TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class TestGroupBy {&#10;    @Test(timeout = 1000)&#10;    fun testGroupCustomersByCity() {&#10;        Assert.assertTrue(errorMessage(&quot;groupCustomersByCity&quot;),&#10;                groupedByCities == shop.groupCustomersByCity())&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957207000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Associate&#10;&#10;Learn about [association](https://kotlinlang.org/docs/reference/collection-transformations.html#association).&#10;Implement the following functions using &#10;[`associateBy`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate.html),&#10;[`associateWith`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate-with.html), &#10;and [`associate`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate-by.html):&#10;&#10;- Build a map from the customer name to the customer&#10;- Build a map from the customer to their city &#10;- Build a map from the customer name to their city&#10;&#10;```kotlin&#10;val list = listOf(&quot;abc&quot;, &quot;cdef&quot;)&#10;&#10;list.associateBy { it.first() } == &#10;        mapOf('a' to &quot;abc&quot;, 'c' to &quot;cdef&quot;)&#10;&#10;list.associateWith { it.length } == &#10;        mapOf(&quot;abc&quot; to 3, &quot;cdef&quot; to 4)&#10;&#10;list.associate { it.first() to it.length } == &#10;        mapOf('a' to 3, 'c' to 4)&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="963313" />
                      <option name="index" value="8" />
                      <option name="name" value="Associate" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="116" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="116" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.associateBy(Customer::name)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="231" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="231" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.associateWith(Customer::city)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="353" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="353" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.associate { it.name to it.city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Build a map from the customer name to the customer&#10;fun Shop.nameToCustomerMap(): Map&lt;String, Customer&gt; =&#10;        TODO()&#10;&#10;// Build a map from the customer to their city&#10;fun Shop.customerToCityMap(): Map&lt;Customer, City&gt; =&#10;        TODO()&#10;&#10;// Build a map from the customer name to their city&#10;fun Shop.customerNameToCityMap(): Map&lt;String, City&gt; =&#10;        TODO()" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/Tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/Tests.kt" />
                                <option name="text" value="import koans.util.errorMessage&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestAssociate {&#10;    @Test(timeout = 1000)&#10;    fun testAssociateBy() {&#10;        val expected = customers.values.associateBy { it.name }&#10;        val actual = shop.nameToCustomerMap()&#10;        Assert.assertTrue(errorMessage(&quot;nameToCustomerMap&quot;),&#10;                expected == actual)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testAssociateWith() {&#10;        val expected = customers.values.associateWith { it.city }&#10;        val actual = shop.customerToCityMap()&#10;        Assert.assertTrue(errorMessage(&quot;customerToCityMap&quot;),&#10;                expected == actual)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testAssociate() {&#10;        val expected = customers.values.associate { it.name to it.city }&#10;        val actual = shop.customerNameToCityMap()&#10;        Assert.assertTrue(errorMessage(&quot;customerNameToCityMap&quot;),&#10;                expected == actual)&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957073000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Partition&#10;&#10;Learn about [partitioning](https://kotlinlang.org/docs/reference/collection-filtering.html#partitioning)&#10;and the [destructuring declaration](http://kotlinlang.org/docs/reference/multi-declarations.html)&#10;syntax that is often used together with `partition`.&#10;&#10;Then implement a function for returning customers who have more undelivered orders&#10;than delivered orders using&#10;[`partition`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/partition.html).&#10;&#10;```kotlin&#10;val numbers = listOf(1, 3, -4, 2, -11)&#10;val (positive, negative) =&#10;    numbers.partition { it &gt; 0 }&#10;&#10;positive == listOf(1, 3, 2)&#10;negative == listOf(-4, -11)&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234748" />
                      <option name="index" value="9" />
                      <option name="name" value="Partition" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="134" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="134" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.filter {&#10;    val (delivered, undelivered) = it.orders.partition { it.isDelivered }&#10;    undelivered.size &gt; delivered.size&#10;}.toSet()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return customers who have more undelivered orders than delivered&#10;fun Shop.getCustomersWithMoreUndeliveredOrders(): Set&lt;Customer&gt; = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class TestPartition {&#10;    @Test(timeout = 1000)&#10;    fun testGetCustomersWhoHaveMoreUndeliveredOrdersThanDelivered() {&#10;        Assert.assertTrue(errorMessage(&quot;getCustomersWithMoreUndeliveredOrders&quot;),&#10;                setOf(customers[reka]) == shop.getCustomersWithMoreUndeliveredOrders())&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1594801848000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## FlatMap&#10;&#10;Learn about [flattening](https://kotlinlang.org/docs/reference/collection-transformations.html#flattening)&#10;and implement two functions using&#10;[`flatMap`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/flat-map.html):&#10;- The first should return all products the given customer has ordered&#10;- The second should return all products that were ordered by at least one customer&#10;&#10;```kotlin&#10;val result = listOf(&quot;abc&quot;, &quot;12&quot;)&#10;    .flatMap { it.toList() }&#10;&#10;result == listOf('a', 'b', 'c', '1', '2')&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234743" />
                      <option name="index" value="10" />
                      <option name="name" value="FlatMap" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="113" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="113" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="orders.flatMap(Order::products)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="241" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="241" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.flatMap(Customer::getOrderedProducts).toSet()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return all products the given customer has ordered&#10;fun Customer.getOrderedProducts(): List&lt;Product&gt; =&#10;        TODO()&#10;&#10;// Return all products that were ordered by at least one customer&#10;fun Shop.getOrderedProducts(): Set&lt;Product&gt; =&#10;        TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class TestFlatMap {&#10;    @Test(timeout = 1000)&#10;    fun testGetOrderedProductsSet() {&#10;        Assert.assertTrue(errorMessage(&quot;Customer.getOrderedProducts&quot;),&#10;                listOf(idea, idea, idea) == customers[reka]?.getOrderedProducts())&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testGetAllOrderedProducts() {&#10;        Assert.assertTrue(errorMessage(&quot;Shop.getOrderedProducts&quot;),&#10;                orderedProducts == shop.getOrderedProducts())&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957222000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Fold&#10;&#10;Learn about [fold and reduce](https://kotlinlang.org/docs/reference/collection-aggregate.html#fold-and-reduce)&#10;and implement a function that returns the set of products that were ordered by all the customers using&#10;[`fold`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/fold.html).&#10;&#10;You can use the `Customer.getOrderedProducts()` which was defined in the previous task&#10;(copy its implementation).&#10;&#10;```kotlin&#10;listOf(1, 2, 3, 4)&#10;    .fold(1) { partProduct, element -&gt;&#10;        element * partProduct&#10;    } == 24&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234749" />
                      <option name="index" value="11" />
                      <option name="name" value="Fold" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="120" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="120" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="val allProducts = customers.flatMap { it.getOrderedProducts() }.toSet()&#10;    return customers.fold(allProducts, { orderedByAll, customer -&gt;&#10;        orderedByAll.intersect(customer.getOrderedProducts())&#10;    })" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="189" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="189" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="orders.flatMap(Order::products)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return the set of products that were ordered by all customers&#10;fun Shop.getProductsOrderedByAll(): Set&lt;Product&gt; {&#10;    TODO()&#10;}&#10;&#10;fun Customer.getOrderedProducts(): List&lt;Product&gt; =&#10;        TODO()" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class TestFold {&#10;    @Test(timeout = 1000)&#10;    fun testGetProductsOrderedByAllCustomers() {&#10;        val testShop = shop(&quot;test shop for 'fold'&quot;,&#10;                customer(lucas, Canberra,&#10;                        order(idea),&#10;                        order(webStorm)&#10;                ),&#10;                customer(reka, Budapest,&#10;                        order(idea),&#10;                        order(youTrack)&#10;                )&#10;        )&#10;        Assert.assertTrue(errorMessage(&quot;getProductsOrderedByAll&quot;),&#10;                setOf(idea) == testShop.getProductsOrderedByAll())&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1594801854000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Compound tasks&#10;&#10;Implement two functions:&#10;- The first one should find the most expensive product among all the *delivered* products&#10;ordered by the customer. Use `Order.isDelivered` flag.&#10;&#10;- The second one should count the amount of times a product was ordered.&#10;Note that a customer may order the same product several times.&#10;&#10;Use the functions from the Kotlin standard library that were previously discussed.&#10;&#10;You can use the `Customer.getOrderedProducts()` function&#10;defined in the previous task (copy its implementation).&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234750" />
                      <option name="index" value="12" />
                      <option name="name" value="Compound tasks" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="193" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="193" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="return customer&#10;            .orders&#10;            .filter(Order::isDelivered)&#10;            .flatMap(Order::products)&#10;            .maxBy(Product::price)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="393" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="393" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="return customers&#10;            .flatMap(Customer::getOrderedProducts)&#10;            .count { it == product }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="462" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="462" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="orders.flatMap(Order::products)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Find the most expensive product among all the delivered products&#10;// ordered by the customer. Use `Order.isDelivered` flag.&#10;fun findMostExpensiveProductBy(customer: Customer): Product? {&#10;    TODO()&#10;}&#10;&#10;// Count the amount of times a product was ordered.&#10;// Note that a customer may order the same product several times.&#10;fun Shop.getNumberOfTimesProductWasOrdered(product: Product): Int {&#10;    TODO()&#10;}&#10;&#10;fun Customer.getOrderedProducts(): List&lt;Product&gt; =&#10;        /* TODO */&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.errorMessage&#10;&#10;class K_Compound_Tasks {&#10;&#10;    @Test(timeout = 1000)&#10;    fun testMostExpensiveDeliveredProduct() {&#10;        val testShop = shop(&quot;test shop for 'most expensive delivered product'&quot;,&#10;                customer(lucas, Canberra,&#10;                        order(idea, isDelivered = false),&#10;                        order(reSharper)&#10;                )&#10;        )&#10;        Assert.assertTrue(errorMessage(&quot;findMostExpensiveProductBy&quot;), reSharper == findMostExpensiveProductBy(testShop.customers[0]))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testNumberOfTimesEachProductWasOrdered() {&#10;        Assert.assertTrue(errorMessage(&quot;getNumberOfTimesProductWasOrdered&quot;), 3 == shop.getNumberOfTimesProductWasOrdered(reSharper))&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957238000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Getting used to new style&#10;&#10;We can rewrite and simplify the following code using lambdas and operations on collections.&#10;Fill in the gaps in `doSomethingWithCollection`, &#10;the simplified version of the `doSomethingWithCollectionOldStyle` function, &#10;so that its behavior stays the same and isn't modified in any way.&#10;&#10;```kotlin&#10;fun doSomethingWithCollectionOldStyle(&#10;    collection: Collection&#10;): Collection&lt;String&gt;? {&#10;    val groupsByLength = mutableMapOf&lt;Int, MutableList&lt;String&gt;&gt;()&#10;    for (s in collection) {&#10;        var strings: MutableList&lt;String&gt;? = groupsByLength[s.length]&#10;        if (strings == null) {&#10;            strings = mutableListOf()&#10;            groupsByLength[s.length] = strings&#10;        }&#10;        strings.add(s)&#10;    }&#10;&#10;    var maximumSizeOfGroup = 0&#10;    for (group in groupsByLength.values) {&#10;        if (group.size &gt; maximumSizeOfGroup) {&#10;            maximumSizeOfGroup = group.size&#10;        }&#10;    }&#10;&#10;    for (group in groupsByLength.values) {&#10;        if (group.size == maximumSizeOfGroup) {&#10;            return group&#10;        }&#10;    }&#10;    return null&#10;}&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234751" />
                      <option name="index" value="13" />
                      <option name="name" value="Getting used to new style" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="137" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="137" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="s.length" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="213" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="213" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="group.size" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="285" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="285" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="group.size == maximumSizeOfGroup" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun doSomethingWithCollection(collection: Collection&lt;String&gt;): Collection&lt;String&gt;? {&#10;&#10;    val groupsByLength = collection.groupBy { s -&gt; TODO() }&#10;&#10;    val maximumSizeOfGroup = groupsByLength.values.map { group -&gt; TODO() }.max()&#10;&#10;    return groupsByLength.values.firstOrNull { group -&gt; TODO() }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestExtensionsOnCollections {&#10;    @Test(timeout = 1000)&#10;    fun testCollectionOfOneElement() {&#10;        doTest(listOf(&quot;a&quot;), listOf(&quot;a&quot;))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testSimpleCollection() {&#10;        doTest(listOf(&quot;a&quot;, &quot;c&quot;), listOf(&quot;a&quot;, &quot;bb&quot;, &quot;c&quot;))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testCollectionWithEmptyStrings() {&#10;        doTest(listOf(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;), listOf(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;a&quot;, &quot;bb&quot;, &quot;ccc&quot;, &quot;dddd&quot;))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testCollectionWithTwoGroupsOfMaximalSize() {&#10;        doTest(listOf(&quot;a&quot;, &quot;c&quot;), listOf(&quot;a&quot;, &quot;bb&quot;, &quot;c&quot;, &quot;dd&quot;))&#10;    }&#10;&#10;    private fun doTest(expected: Collection&lt;String&gt;?, argument: Collection&lt;String&gt;) {&#10;        Assert.assertEquals(&#10;                &quot;Wrong result for 'doSomethingStrangeWithCollection()' call on &quot; +&#10;                        &quot;${argument.joinToString(prefix = &quot;[&quot;, postfix = &quot;]&quot;) { &quot;\&quot;$it\&quot;&quot; }}:\n&quot;,&#10;                expected, doSomethingWithCollection(argument))&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1594801860000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Sequences&#10;&#10;Learn about [sequences](https://kotlinlang.org/docs/reference/sequences.html),&#10;they allow you to perform operations lazily rather than eagerly.&#10;Copy the implementation from the previous task and modify it in a way&#10;that the operations on sequences are used. &#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="963314" />
                      <option name="index" value="14" />
                      <option name="name" value="Sequences" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="193" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="193" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="return customer&#10;            .orders&#10;            .asSequence()&#10;            .filter(Order::isDelivered)&#10;            .flatMap { it.products.asSequence() }&#10;            .maxBy(Product::price)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="393" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="393" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="return customers&#10;            .asSequence()&#10;            .flatMap(Customer::getOrderedProducts)&#10;            .count { it == product }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="466" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="466" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="orders.flatMap(Order::products).asSequence()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Find the most expensive product among all the delivered products&#10;// ordered by the customer. Use `Order.isDelivered` flag.&#10;fun findMostExpensiveProductBy(customer: Customer): Product? {&#10;    TODO()&#10;}&#10;&#10;// Count the amount of times a product was ordered.&#10;// Note that a customer may order the same product several times.&#10;fun Shop.getNumberOfTimesProductWasOrdered(product: Product): Int {&#10;    TODO()&#10;}&#10;&#10;fun Customer.getOrderedProducts(): Sequence&lt;Product&gt; =&#10;        TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/Tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/Tests.kt" />
                                <option name="text" value="import koans.util.errorMessage&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class K_Compound_Tasks {&#10;&#10;    @Test(timeout = 1000)&#10;    fun testMostExpensiveDeliveredProduct() {&#10;        val testShop = shop(&quot;test shop for 'most expensive delivered product'&quot;,&#10;                customer(lucas, Canberra,&#10;                        order(idea, isDelivered = false),&#10;                        order(reSharper)&#10;                )&#10;        )&#10;        Assert.assertTrue(errorMessage(&quot;findMostExpensiveProductBy&quot;), reSharper == findMostExpensiveProductBy(testShop.customers[0]))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testNumberOfTimesEachProductWasOrdered() {&#10;        Assert.assertTrue(errorMessage(&quot;getNumberOfTimesProductWasOrdered&quot;), 3 == shop.getNumberOfTimesProductWasOrdered(reSharper))&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.associateBy { it.name }&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957076000" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59495" />
                <option name="index" value="5" />
                <option name="name" value="Properties" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1594801860000" />
                <option name="unitId" value="36980" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Properties&#10;&#10;Learn about the [properties](http://kotlinlang.org/docs/reference/properties.html#properties-and-fields) in Kotlin.&#10;&#10;Add a custom setter to PropertyExample.propertyWithCounter so that&#10;the `counter` property is incremented every time a `propertyWithCounter` is assigned to it.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234752" />
                      <option name="index" value="1" />
                      <option name="name" value="Properties" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="3" />
                                          <option name="offset" value="95" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="3" />
                                      <option name="offset" value="95" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="set" />
                                      <option name="possibleAnswer" value="set(v) {&#10;            field = v&#10;            counter++&#10;        }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class PropertyExample() {&#10;    var counter = 0&#10;    var propertyWithCounter: Int? = null&#10;        set&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestProperties {&#10;    @Test(timeout = 1000)&#10;    fun testPropertyWithCounter() {&#10;        val q = PropertyExample()&#10;        q.propertyWithCounter = 14&#10;        q.propertyWithCounter = 21&#10;        q.propertyWithCounter = 32&#10;        Assert.assertTrue(&quot;The property 'counter' should contain the number of assignments to 'propertyWithCounter'&quot;,&#10;                3 == q.counter)&#10;        Assert.assertTrue(&quot;The property 'propertyWithCounter' should store the value assigned to it&quot;, 32 == q.propertyWithCounter)&#10;    }&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957254000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Lazy property&#10;&#10;Add a custom getter to make the val 'lazy' really lazy.&#10;It should be initialized by invoking 'initializer()' during the first access.&#10;&#10;You can add any additional properties as you need.&#10;&#10;Do not use delegated properties!&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234753" />
                      <option name="index" value="2" />
                      <option name="name" value="Lazy property" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="53" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="53" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="var value: Int? = null" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="110" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="110" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="if (value == null) {&#10;                value = initializer()&#10;            }&#10;            return value!!" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class LazyProperty(val initializer: () -&gt; Int) {&#10;    /* TODO */&#10;    val lazy: Int&#10;        get() {&#10;            TODO()&#10;        }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestLazyProperty {&#10;    @Test(timeout = 1000)&#10;    fun testLazy() {&#10;        var initialized = false&#10;        val lazyProperty = LazyProperty { initialized = true; 42 }&#10;        Assert.assertFalse(&quot;Property shouldn't be initialized before access&quot;, initialized)&#10;        val result: Int = lazyProperty.lazy&#10;        Assert.assertTrue(&quot;Property should be initialized after access&quot;, initialized)&#10;        Assert.assertTrue(&quot;Property should be initialized after access&quot;, 42 == result)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun initializedOnce() {&#10;        var initialized = 0&#10;        val lazyProperty = LazyProperty { initialized++; 42 }&#10;        lazyProperty.lazy&#10;        lazyProperty.lazy&#10;        Assert.assertEquals(&quot;Lazy property should be initialized only once&quot;, 1, initialized)&#10;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957261000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Delegates example&#10;&#10;Learn about [delegated properties](http://kotlinlang.org/docs/reference/delegated-properties.html)&#10;and make the property lazy using delegates.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234754" />
                      <option name="index" value="3" />
                      <option name="name" value="Delegates examples" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="75" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="75" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="lazy(initializer)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class LazyProperty(val initializer: () -&gt; Int) {&#10;    val lazyValue: Int by TODO()&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestDelegatesExamples {&#10;    @Test(timeout = 1000)&#10;    fun testLazy() {&#10;        var initialized = false&#10;        val lazyProperty = LazyProperty { initialized = true; 42 }&#10;        Assert.assertFalse(&quot;Property shouldn't be initialized before access&quot;, initialized)&#10;        val result: Int = lazyProperty.lazyValue&#10;        Assert.assertTrue(&quot;Property should be initialized after access&quot;, initialized)&#10;        Assert.assertTrue(&quot;Property should be initialized after access&quot;, 42 == result)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun initializedOnce() {&#10;        var initialized = 0&#10;        val lazyProperty = LazyProperty { initialized++; 42 }&#10;        lazyProperty.lazyValue&#10;        lazyProperty.lazyValue&#10;        Assert.assertEquals(&quot;Lazy property should be initialized only once&quot;, 1, initialized)&#10;&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957269000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Delegates&#10;&#10;You can declare your own [delegates](https://kotlinlang.org/docs/reference/delegated-properties.html#property-delegate-requirements).&#10;Implement the methods of the class `EffectiveDate` so you can delegate to it.&#10;Store only the time in milliseconds in the `timeInMillis` property.&#10;&#10;Use the extension functions `MyDate.toMillis()` and `Long.toDate()`, defined in&#10;`MyDate.kt`.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234755" />
                      <option name="index" value="4" />
                      <option name="name" value="Delegates how it works" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="302" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="302" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="return timeInMillis!!.toDate()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="403" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="403" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="timeInMillis = value.toMillis()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import kotlin.properties.ReadWriteProperty&#10;import kotlin.reflect.KProperty&#10;&#10;class D {&#10;    var date: MyDate by EffectiveDate()&#10;}&#10;&#10;class EffectiveDate&lt;R&gt; : ReadWriteProperty&lt;R, MyDate&gt; {&#10;&#10;    var timeInMillis: Long? = null&#10;&#10;    override fun getValue(thisRef: R, property: KProperty&lt;*&gt;): MyDate {&#10;        TODO()&#10;    }&#10;&#10;    override fun setValue(thisRef: R, property: KProperty&lt;*&gt;, value: MyDate) {&#10;        TODO()&#10;    }&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/MyDate.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/MyDate.kt" />
                                <option name="text" value="import java.util.Calendar&#10;&#10;data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int)&#10;&#10;fun MyDate.toMillis(): Long {&#10;    val c = Calendar.getInstance()&#10;    c.set(year, month, dayOfMonth)&#10;    return c.getTimeInMillis()&#10;}&#10;&#10;fun Long.toDate(): MyDate {&#10;    val c = Calendar.getInstance()&#10;    c.setTimeInMillis(this)&#10;    return MyDate(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DATE))&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestDelegatesHowItWorks {&#10;    @Test(timeout = 1000)&#10;    fun testDate() {&#10;        val d = D()&#10;        d.date = MyDate(2014, 1, 13)&#10;        val message = &quot;The methods 'getValue' and 'setValue' are implemented incorrectly&quot;&#10;        Assert.assertTrue(message, 2014 == d.date.year)&#10;        Assert.assertTrue(message, 1 == d.date.month)&#10;        Assert.assertTrue(message, 13 == d.date.dayOfMonth)&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957278000" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59496" />
                <option name="index" value="6" />
                <option name="name" value="Builders" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1594801866000" />
                <option name="unitId" value="36981" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Function literals with receiver&#10;&#10;Learn about [function literals with receiver](https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver).&#10;&#10;You can declare `isEven` and `isOdd` as values, that can be called as extension functions.&#10;Complete the declarations in the code.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234756" />
                      <option name="index" value="1" />
                      <option name="name" value="Function literals with receiver" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="66" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="66" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="this % 2 == 0" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="112" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="112" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="this % 2 != 0" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun task(): List&lt;Boolean&gt; {&#10;    val isEven: Int.() -&gt; Boolean = { TODO() }&#10;    val isOdd: Int.() -&gt; Boolean = { TODO() }&#10;&#10;    return listOf(42.isOdd(), 239.isOdd(), 294823098.isEven())&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestExtensionFunctionLiterals {&#10;    @Test(timeout = 1000)&#10;    fun testIsOddAndIsEven() {&#10;        Assert.assertEquals(&quot;Wrong results for 'isOdd' and 'isEven' calls:\n&quot;,&#10;                listOf(false, true, true), task())&#10;&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957286000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## String and map builders&#10;&#10;Function literals with receiver are very useful for creating builders, for example:&#10;&#10;```kotlin&#10;fun buildString(build: StringBuilder.() -&gt; Unit): String {&#10;    val stringBuilder = StringBuilder()&#10;    stringBuilder.build()&#10;    return stringBuilder.toString()&#10;}&#10;&#10;val s = buildString {&#10;    this.append(&quot;Numbers: &quot;)&#10;    for (i in 1..3) {&#10;        // 'this' can be omitted&#10;        append(i)&#10;    }&#10;}&#10;&#10;s == &quot;Numbers: 123&quot;&#10;```&#10;&#10;Implement the function 'buildMap' that takes a parameter (of extension function type) creates a new `HashMap`,&#10;builds it, and returns it as a result.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234757" />
                      <option name="index" value="2" />
                      <option name="name" value="String and map builders" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="26" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="26" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="fun &lt;K, V&gt; buildMap(build: HashMap&lt;K, V&gt;.() -&gt; Unit): Map&lt;K, V&gt; {&#10;    val map = HashMap&lt;K, V&gt;()&#10;    map.build()&#10;    return map&#10;}" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import java.util.HashMap&#10;&#10;/* TODO */&#10;&#10;fun usage(): Map&lt;Int, String&gt; {&#10;    return buildMap {&#10;        put(0, &quot;0&quot;)&#10;        for (i in 1..10) {&#10;            put(i, &quot;$i&quot;)&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestStringAndMapBuilders {&#10;    @Test(timeout = 1000)&#10;    fun testBuildMap() {&#10;        val expected = hashMapOf&lt;Int, String&gt;()&#10;        for (i in 0..10) {&#10;            expected[i] = &quot;$i&quot;&#10;        }&#10;        Assert.assertEquals(&quot;Wrong result for 'usage()' call:\n&quot;, expected, usage())&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1594801866000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## The function apply&#10;&#10;The previous examples can be rewritten using the library function&#10;[`apply`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/apply.html).&#10;Write your own implementation of this function named 'myApply'.&#10;&#10;Learn about the other [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html)&#10;and how to use them.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234758" />
                      <option name="index" value="3" />
                      <option name="name" value="The function apply" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="44" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="44" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="f()&#10;    return this" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun &lt;T&gt; T.myApply(f: T.() -&gt; Unit): T {&#10;    TODO()&#10;}&#10;&#10;fun createString(): String {&#10;    return StringBuilder().myApply {&#10;        append(&quot;Numbers: &quot;)&#10;        for (i in 1..10) {&#10;            append(i)&#10;        }&#10;    }.toString()&#10;}&#10;&#10;fun createMap(): Map&lt;Int, String&gt; {&#10;    return hashMapOf&lt;Int, String&gt;().myApply {&#10;        put(0, &quot;0&quot;)&#10;        for (i in 1..10) {&#10;            put(i, &quot;$i&quot;)&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import java.util.HashMap&#10;&#10;class TestTheFunctionWith {&#10;    @Test(timeout = 1000)&#10;    fun testCreateString() {&#10;        val sb = StringBuilder()&#10;        sb.append(&quot;Numbers: &quot;)&#10;        for (i in 1..10) {&#10;            sb.append(i)&#10;        }&#10;        Assert.assertEquals(&quot;Wrong result for 'createString()' call:\n&quot;, sb.toString(), createString())&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testCreateMap() {&#10;        val map = createMap()&#10;        val expected = HashMap&lt;Int, String&gt;()&#10;        for (i in 0..10) {&#10;            expected[i] = &quot;$i&quot;&#10;        }&#10;        Assert.assertEquals(&quot;Wrong result for 'createMap()' call:\n&quot;, expected, map)&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957301000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## HTML builder&#10;&#10;_1._ Fill the table with proper values from the product list.&#10;The products are declared in `data.kt`.&#10;&#10;_2._ Color the table like a chess board.&#10;Use the `getTitleColor()` and `getCellColor()` functions.&#10;Pass a color as an argument to the functions `tr`, `td`.&#10;&#10;Run the main function defined in the file `demo.kt` to see the rendered table.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234759" />
                      <option name="index" value="4" />
                      <option name="name" value="Html builders" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/html.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/html.kt" />
                                <option name="text" value="open class Tag(val name: String) {&#10;    val children = mutableListOf&lt;Tag&gt;()&#10;    val attributes = mutableListOf&lt;Attribute&gt;()&#10;&#10;    override fun toString(): String {&#10;        return &quot;&lt;$name&quot; +&#10;                (if (attributes.isEmpty()) &quot;&quot; else attributes.joinToString(separator = &quot;&quot;, prefix = &quot; &quot;)) + &quot;&gt;&quot; +&#10;                (if (children.isEmpty()) &quot;&quot; else children.joinToString(separator = &quot;&quot;)) +&#10;                &quot;&lt;/$name&gt;&quot;&#10;    }&#10;}&#10;&#10;class Attribute(val name: String, val value: String) {&#10;    override fun toString() = &quot;&quot;&quot;$name=&quot;$value&quot; &quot;&quot;&quot;&#10;}&#10;&#10;fun &lt;T : Tag&gt; T.set(name: String, value: String?): T {&#10;    if (value != null) {&#10;        attributes.add(Attribute(name, value))&#10;    }&#10;    return this&#10;}&#10;&#10;fun &lt;T : Tag&gt; Tag.doInit(tag: T, init: T.() -&gt; Unit): T {&#10;    tag.init()&#10;    children.add(tag)&#10;    return tag&#10;}&#10;&#10;class Html : Tag(&quot;html&quot;)&#10;class Table : Tag(&quot;table&quot;)&#10;class Center : Tag(&quot;center&quot;)&#10;class TR : Tag(&quot;tr&quot;)&#10;class TD : Tag(&quot;td&quot;)&#10;class Text(val text: String) : Tag(&quot;b&quot;) {&#10;    override fun toString() = text&#10;}&#10;&#10;fun html(init: Html.() -&gt; Unit): Html = Html().apply(init)&#10;&#10;fun Html.table(init: Table.() -&gt; Unit) = doInit(Table(), init)&#10;fun Html.center(init: Center.() -&gt; Unit) = doInit(Center(), init)&#10;&#10;fun Table.tr(color: String? = null, init: TR.() -&gt; Unit) = doInit(TR(), init).set(&quot;bgcolor&quot;, color)&#10;&#10;fun TR.td(color: String? = null, align: String = &quot;left&quot;, init: TD.() -&gt; Unit) = doInit(TD(), init).set(&quot;align&quot;, align).set(&quot;bgcolor&quot;, color)&#10;&#10;fun Tag.text(s: Any?) = doInit(Text(s.toString()), {})&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="83" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="83" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="(color = getTitleColor())" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="389" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="389" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="for ((index, product) in products.withIndex()) {&#10;                tr {&#10;                    td(color = getCellColor(index, 0)) {&#10;                        text(product.description)&#10;                    }&#10;                    td(color = getCellColor(index, 1)) {&#10;                        text(product.price)&#10;                    }&#10;                    td(color = getCellColor(index, 2)) {&#10;                        text(product.popularity)&#10;                    }&#10;                }&#10;            }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun renderProductTable(): String {&#10;    return html {&#10;        table {&#10;            tr/* TODO */ {&#10;                td {&#10;                    text(&quot;Product&quot;)&#10;                }&#10;                td {&#10;                    text(&quot;Price&quot;)&#10;                }&#10;                td {&#10;                    text(&quot;Popularity&quot;)&#10;                }&#10;            }&#10;            val products = getProducts()&#10;            TODO()&#10;        }&#10;    }.toString()&#10;}&#10;&#10;fun getTitleColor() = &quot;#b9c9fe&quot;&#10;fun getCellColor(index: Int, row: Int) = if ((index + row) % 2 == 0) &quot;#dce4ff&quot; else &quot;#eff2ff&quot;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/data.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/data.kt" />
                                <option name="text" value="data class Product(val description: String, val price: Double, val popularity: Int)&#10;&#10;val cactus = Product(&quot;cactus&quot;, 11.2, 13)&#10;val cake = Product(&quot;cake&quot;, 3.2, 111)&#10;val camera = Product(&quot;camera&quot;, 134.5, 2)&#10;val car = Product(&quot;car&quot;, 30000.0, 0)&#10;val carrot = Product(&quot;carrot&quot;, 1.34, 5)&#10;val cellPhone = Product(&quot;cell phone&quot;, 129.9, 99)&#10;val chimney = Product(&quot;chimney&quot;, 190.0, 2)&#10;val certificate = Product(&quot;certificate&quot;, 99.9, 1)&#10;val cigar = Product(&quot;cigar&quot;, 8.0, 51)&#10;val coffee = Product(&quot;coffee&quot;, 8.0, 67)&#10;val coffeeMaker = Product(&quot;coffee maker&quot;, 201.2, 1)&#10;val cola = Product(&quot;cola&quot;, 4.0, 67)&#10;val cranberry = Product(&quot;cranberry&quot;, 4.1, 39)&#10;val crocs = Product(&quot;crocs&quot;, 18.7, 10)&#10;val crocodile = Product(&quot;crocodile&quot;, 20000.2, 1)&#10;val cushion = Product(&quot;cushion&quot;, 131.0, 0)&#10;&#10;fun getProducts() = listOf(cactus, cake, camera, car, carrot, cellPhone, chimney, certificate, cigar, coffee, coffeeMaker,&#10;        cola, cranberry, crocs, crocodile, cushion)" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/demo.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/demo.kt" />
                                <option name="text" value="import javax.swing.JFrame&#10;import javax.swing.JLabel&#10;import javax.swing.JScrollPane&#10;import javax.swing.SwingConstants.CENTER&#10;&#10;fun main() {&#10;    with(JFrame(&quot;Product popularity&quot;)) {&#10;        setSize(600, 600)&#10;        defaultCloseOperation = JFrame.EXIT_ON_CLOSE&#10;        add(JScrollPane(JLabel(renderProductTable(), CENTER)))&#10;        isVisible = true&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestHtmlBuilders {&#10;    @Test(timeout = 1000)&#10;    fun productTableIsFilled() {&#10;        val result = renderProductTable()&#10;        Assert.assertTrue(&quot;Product table should contain the corresponding data&quot;, result.contains(&quot;cactus&quot;))&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun productTableIsColored() {&#10;        val result = renderProductTable()&#10;        Assert.assertTrue(&quot;Product table should be colored&quot;, result.contains(&quot;bgcolor&quot;))&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/demo.kt.wb">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/demo.kt.wb" />
                                <option name="text" value="import kotlin.browser.document&#10;&#10;fun main(args: Array&lt;String&gt;){&#10;    document.body!!.style.overflowY = &quot;&quot;&#10;    document.body!!.innerHTML = renderProductTable()&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.md.wb">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="task.md.wb" />
                                <option name="text" value="## Html builder&#10;&#10;_1._ Fill the table with the proper values from the product list.&#10;The products are declared in `data.kt`.&#10;&#10;_2._ Color the table like a chess board (using getTitleColor() and getCellColor() functions above).&#10;Pass a color as an argument to the functions `tr`, `td`.&#10;&#10;You can run 'JavaScript(Canvas)' configuration to see the rendered table." />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957308000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Builders: how they work&#10;&#10;Answer the questions below&#10;&#10;**1. In the Kotlin code**&#10;&#10;```kotlin&#10;tr {&#10;    td {&#10;        text(&quot;Product&quot;)&#10;    }&#10;    td {&#10;        text(&quot;Popularity&quot;)&#10;    }&#10;}&#10;```&#10;&#10;**'td' is:**&#10;&#10;a. a special built-in syntactic construct&#10;&#10;b. a function declaration&#10;&#10;c. a function invocation&#10;&#10;***&#10;&#10;**2. In the Kotlin code**&#10;&#10;```kotlin&#10;tr (color = &quot;yellow&quot;) {&#10;    td {&#10;        text(&quot;Product&quot;)&#10;    }&#10;    td {&#10;        text(&quot;Popularity&quot;)&#10;    }&#10;}&#10;```&#10;&#10;**'color' is:**&#10;&#10;a. a new variable declaration&#10;&#10;b. an argument name&#10;&#10;c. an argument value&#10;&#10;***&#10;&#10;**3. The block**&#10;&#10;```kotlin&#10;{&#10;    text(&quot;Product&quot;)&#10;}&#10;```&#10;&#10;**from the previous question is:**&#10;&#10;a. a block inside built-in syntax construction `td`&#10;&#10;b. a function literal (or &quot;lambda&quot;)&#10;&#10;c. something mysterious&#10;&#10;***&#10;&#10;**4. For the code**&#10;&#10;```kotlin&#10;tr (color = &quot;yellow&quot;) {&#10;    this.td {&#10;        text(&quot;Product&quot;)&#10;    }&#10;    td {&#10;        text(&quot;Popularity&quot;)&#10;    }&#10;}&#10;```&#10;&#10;**which of the following is true:**&#10;&#10;a. this code doesn't compile&#10;&#10;b. `this` refers to an instance of an outer class&#10;&#10;c. `this` refers to a receiver parameter TR of the function literal:&#10;&#10;```kotlin&#10;tr (color = &quot;yellow&quot;) {&#10;    this@tr.td {&#10;        text(&quot;Product&quot;)&#10;    }&#10;}&#10;```&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234760" />
                      <option name="index" value="5" />
                      <option name="name" value="Builders how it works" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="42" />
                                          <option name="offset" value="91" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="42" />
                                      <option name="offset" value="91" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="1 to null, 2 to null, 3 to null, 4 to null" />
                                      <option name="possibleAnswer" value="1 to c, 2 to b, 3 to b, 4 to c" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import Answer.*&#10;&#10;enum class Answer { a, b, c }&#10;&#10;val answers = mapOf&lt;Int, Answer?&gt;(&#10;        1 to null, 2 to null, 3 to null, 4 to null&#10;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;import Answer.*&#10;&#10;class TestBuildersHowItWorks {&#10;    @Test(timeout = 1000)&#10;    fun testBuildersQuiz() {&#10;        if (answers.values.toSet() == setOf(null)) {&#10;            Assert.fail(&quot;Please specify your answers!&quot;)&#10;        }&#10;        val correctAnswers = mapOf(22 - 20 to b, 1 + 3 to c, 11 - 8 to b, 79 - 78 to c)&#10;        if (correctAnswers != answers) {&#10;            val incorrect = (1..4).filter { answers[it] != correctAnswers[it] }&#10;            val message = if (incorrect.size &gt; 1)&#10;                &quot;Your answers for questions $incorrect are incorrect&quot;&#10;            else&#10;                &quot;Your answer for question $incorrect is incorrect&quot;&#10;            Assert.fail(message)&#10;        }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957316000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Builders implementation&#10;&#10;Complete the implementation of a simplified DSL for HTML.&#10;Implement 'tr' and 'td' functions.&#10;&#10;Learn more about [type-safe builders](https://kotlinlang.org/docs/reference/type-safe-builders.html#type-safe-builders).&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="963315" />
                      <option name="index" value="6" />
                      <option name="name" value="Builders implementation" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="352" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="352" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="val tr = TR()&#10;        tr.init()&#10;        children += tr" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="437" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="437" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="children += TD().apply(init)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="open class Tag(val name: String) {&#10;    protected val children = mutableListOf&lt;Tag&gt;()&#10;&#10;    override fun toString() =&#10;            &quot;&lt;$name&gt;${children.joinToString(&quot;&quot;)}&lt;/$name&gt;&quot;&#10;}&#10;&#10;fun table(init: TABLE.() -&gt; Unit): TABLE {&#10;    val table = TABLE()&#10;    table.init()&#10;    return table&#10;}&#10;&#10;class TABLE : Tag(&quot;table&quot;) {&#10;    fun tr(init: TR.() -&gt; Unit) {&#10;        /* TODO */&#10;    }&#10;}&#10;&#10;class TR : Tag(&quot;tr&quot;) {&#10;    fun td(init: TD.() -&gt; Unit) {&#10;        /* TODO */&#10;    }&#10;}&#10;&#10;class TD : Tag(&quot;td&quot;)&#10;&#10;fun createTable() =&#10;        table {&#10;            tr {&#10;                repeat(2) {&#10;                    td {&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;fun main() {&#10;    println(createTable())&#10;    //&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/Tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/Tests.kt" />
                                <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class HtmlDslTest {&#10;    @Test(timeout = 1000)&#10;    fun testSample() {&#10;        Assert.assertEquals(&#10;                &quot;Wrong result for createTable()&quot;,&#10;                &quot;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;,&#10;                createTable().toString())&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testTable1() {&#10;        Assert.assertEquals(&#10;                &quot;Wrong result for 'table { tr { td {} } }'&quot;,&#10;                &quot;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;,&#10;                table { tr { td {} } }.toString()&#10;        )&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testTable2() {&#10;        Assert.assertEquals(&#10;                &quot;Wrong result for 'repeat(3) { tr { td {} } }'&quot;,&#10;                &quot;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;,&#10;                table {&#10;                    repeat(3) {&#10;                        tr { td {} }&#10;                    }&#10;                }.toString()&#10;        )&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957080000" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59497" />
                <option name="index" value="7" />
                <option name="name" value="Generics" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1594801866000" />
                <option name="unitId" value="36982" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="## Generic functions&#10;&#10;Learn about [generic functions](https://kotlinlang.org/docs/reference/generics.html#generic-functions).&#10;Make the code compile by implementing a `partitionTo` function that splits&#10;a collection into two collections according to the predicate.&#10;&#10;There is a [`partition()`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/partition.html)&#10;function in the standard library that always returns two newly created lists.&#10;You should write a function that splits the collection into two collections given as arguments.&#10;The signature of the&#10;[`toCollection()`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/to-collection.html)&#10; function from the standard library might help you.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="234761" />
                      <option name="index" value="1" />
                      <option name="name" value="Generic functions" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="26" />
                                          <option name="offset" value="20" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="26" />
                                      <option name="offset" value="20" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="fun partitionTo() = TODO()" />
                                      <option name="possibleAnswer" value="fun &lt;T, C : MutableCollection&lt;T&gt;&gt; Collection&lt;T&gt;.partitionTo(first: C, second: C, predicate: (T) -&gt; Boolean): Pair&lt;C, C&gt; {&#10;    for (element in this) {&#10;        if (predicate(element)) {&#10;            first.add(element)&#10;        } else {&#10;            second.add(element)&#10;        }&#10;    }&#10;    return Pair(first, second)&#10;}" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import java.util.*&#10;&#10;fun partitionTo() = TODO()&#10;&#10;fun partitionWordsAndLines() {&#10;    val (words, lines) = listOf(&quot;a&quot;, &quot;a b&quot;, &quot;c&quot;, &quot;d e&quot;)&#10;            .partitionTo(ArrayList(), ArrayList()) { s -&gt; !s.contains(&quot; &quot;) }&#10;    check(words == listOf(&quot;a&quot;, &quot;c&quot;))&#10;    check(lines == listOf(&quot;a b&quot;, &quot;d e&quot;))&#10;}&#10;&#10;fun partitionLettersAndOtherSymbols() {&#10;    val (letters, other) = setOf('a', '%', 'r', '}')&#10;            .partitionTo(HashSet(), HashSet()) { c -&gt; c in 'a'..'z' || c in 'A'..'Z' }&#10;    check(letters == setOf('a', 'r'))&#10;    check(other == setOf('%', '}'))&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/tests.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/tests.kt" />
                                <option name="text" value="import koans.util.errorMessage&#10;import org.junit.Assert&#10;import org.junit.Test&#10;import java.util.*&#10;&#10;class TestGenericFunctions {&#10;    @Test(timeout = 1000)&#10;    fun testPartitionWordsAndLines() {&#10;        partitionWordsAndLines()&#10;&#10;        val (words, lines) = listOf(&quot;a&quot;, &quot;a b&quot;, &quot;c&quot;, &quot;d e&quot;).partitionTo(ArrayList(), ArrayList()) { s -&gt; !s.contains(&quot; &quot;) }&#10;        Assert.assertEquals(errorMessage(&quot;partitionTo&quot;), listOf(&quot;a&quot;, &quot;c&quot;), words)&#10;        Assert.assertEquals(errorMessage(&quot;partitionTo&quot;), listOf(&quot;a b&quot;, &quot;d e&quot;), lines)&#10;    }&#10;&#10;    @Test(timeout = 1000)&#10;    fun testPartitionLettersAndOtherSymbols() {&#10;        partitionLettersAndOtherSymbols()&#10;&#10;        val (letters, other) = setOf('a', '%', 'r', '}').partitionTo(HashSet(), HashSet()) { c -&gt; c in 'a'..'z' || c in 'A'..'Z' }&#10;        Assert.assertEquals(errorMessage(&quot;partitionTo&quot;), setOf('a', 'r'), letters)&#10;        Assert.assertEquals(errorMessage(&quot;partitionTo&quot;), setOf('%', '}'), other)&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1574957322000" />
                    </EduTask>
                  </list>
                </option>
              </Lesson>
            </list>
          </option>
        </EduCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>